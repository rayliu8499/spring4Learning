<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation=
               "http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">
    <!--
        配置bean
        class: bean 的全类名,通过反射的方式在IOC 容器中创建Bean 所以要求Bean 中必须有无参的构造器
        id: 标识容器中的bean id唯一
    -->
    <bean id="helloWorld" class="lesson.beans.HelloWorld">
        <property name="name" value="Spring"/>
    </bean>

    <!--通过构造方法-->
    <bean id="car" class="lesson.beans.Car">
        <constructor-arg value="Audi" index="0"/>
        <constructor-arg value="ShangHai" index="1"/>
        <constructor-arg value="300000" type="double"/>
    </bean>

    <!--使用构造器注入属性值可以指定参数的位置和参数的类型!以区分重载的构造器!-->
    <bean id="car2" class="lesson.beans.Car">
        <constructor-arg value="Audi" type="java.lang.String"/>
        <!--如果字面值包含特殊字符可以使用<![CDATA[]]>包裹起来-->
        <!--属性值也可以使用value子节点进行配置-->
        <constructor-arg type="java.lang.String">
            <value><![CDATA[<ShangHai>]]]></value>
        </constructor-arg>
        <constructor-arg type="int" value="200"/>
    </bean>

    <bean id="person" class="lesson.beans.Person">
        <property name="name" value="Tom"/>
        <property name="age" value="24"/>
        <!--可以使用property的ref属性建立bean之间的引用关系-->
        <!--
        <property name="car" ref="car2"/>
        -->
        <!--
        <property name="car">
            <ref bean="car2"/>
        </property>
        -->
        <!--内部bean,不能被外部bean引用,只能在内部使用-->

        <property name="car">
            <bean class="lesson.beans.Car">
                <constructor-arg value="Ford"/>
                <constructor-arg value="Changan"/>
                <constructor-arg value="200000" type="double"/>
            </bean>
        </property>

        <property name="car.maxSpeed" value="260"/>
    </bean>

    <bean id="person2" class="lesson.beans.Person">
        <constructor-arg value="Jerry"/>
        <constructor-arg value="25"/>
        <!--
        <constructor-arg ref="car2"/>
        -->
        <!--测试赋值null-->
        <!--
        <constructor-arg><null/></constructor-arg>
        -->
        <constructor-arg ref="car"/>
        <!--为级联属性赋值. 注意:睡醒需要先初始化后才可以为级联属性赋值,否则会有异常,和Struts2不同.-->
        <property name="car.maxSpeed" value="250"/>
    </bean>

    <!--测试如何配置集合属性-->
    <bean id="person3" class="lesson.collection.Person">
        <property name="name" value="Mike"/>
        <property name="age" value="27"/>
        <property name="cars">
            <!--使用list节点-->
            <list>
                <ref bean="car"/>
                <ref bean="car2"/>
                <bean class="lesson.beans.Car">
                    <constructor-arg value="Ford"/>
                    <constructor-arg value="Changan"/>
                    <constructor-arg value="2000000" type="double"/>
                </bean>
            </list>
        </property>
    </bean>

    <!--配置Map属性值-->
    <bean id="newPerson" class="lesson.collection.NewPerson">
        <property name="name" value="Rose"/>
        <property name="age" value="28"/>
        <property name="cars">
            <!--使用map节点以及map的entry子节点配置Map类型的成员变量-->
            <map>
                <entry key="AA" value-ref="car"/>
                <entry key="BB" value-ref="car2"/>
            </map>
        </property>
    </bean>

    <!--配置Properties属性值-->
    <bean id="dataSource" class="lesson.collection.DataSource">
        <!--使用props和prop子节点来为Properties属性赋值-->
        <property name="properties">
            <props>
                <prop key="user">root</prop>
                <prop key="password">1234</prop>
                <prop key="jdbcUrl">jdbc:mysql:///test</prop>
                <prop key="driverClass">com.mysql.jdbc.Driver</prop>
            </props>
        </property>
    </bean>

    <!--配置独立的集合bean,以供多个bean进行引用,需要导入util命名空间-->
    <util:list id="cars">
        <ref bean="car"/>
        <ref bean="car2"/>
    </util:list>

    <bean id="person4" class="lesson.collection.Person">
        <property name="name" value="Jack"/>
        <property name="age" value="29"/>
        <property name="cars" ref="cars"/>
    </bean>

    <!--通过p命名空间为bean的属性赋值,需要导入p命名空间. 相对于传统的配置方式更加的简洁-->
    <bean id="person5" class="lesson.collection.Person" p:age="30" p:name="Queen" p:cars-ref="cars"/>

</beans>
